ЗАДАЧА: "Ресторан: официанты, повара и заказы"

Болванка проекта: https://lms.ait-tr.eu/#/student-cabinet/cohort/110/back_end/consultation/lesson/6962 ZIP архив Homework_Restaurant.zip
Суть / Цель:
В ресторане работает несколько поваров и несколько официантов.

Официанты принимают заказы от клиентов и кладут их в очередь на кухню.

Повара берут заказы из очереди, готовят еду и сообщают, что заказ готов.

Официанты забирают готовые заказы и относят их клиентам.

Что нужно реализовать:
Общую очередь заказов (например BlockingQueue или построить свою).

Потоки поваров, официантов.

Синхронизацию: без неё всё развалится (гонка, пустая очередь, потеря заказов).

Пример:
3 Повара
5 Оффициантов
20 Клиентов (каждый делает только по 1 заказу)
Клиент делает заказ, Свободный Официант его принимает, становится “занятым” и кладет в общую очередь заказов на кухню. Свободный Повар берет заказ из очереди. Повар теперь “занят” заказом, а Официант перестает быть “занятым”, когда передал заказ в очередь.
Клиенты получают уведомление, что один из Официантов стал свободен и “кто из клиентов успел” делает заказ у Официанта. В то же время Повар завершает приготовление блюда, это блюдо должно покинуть очередь на кухне и должно произойти уведомление всем Свободном Официантам, чтобы блюдо кто-то из Официантов отнес клиенту.
Если нет Свободных официантов, то Клиенты “ждут”. Если нет Свободных Поваров, то Официанты “ждут”

На какие навыки упор:
Практика продюсер и консюмер.

Синхронизация доступа к общей очереди.

Логика взаимодействия потоков.

Очередь с ограниченной вместимостью (кухня перегружена? значит официант ждёт).

Советы:
Попробовать сначала создать функционал: Клиент заказывает, Официант принимает, очередь заказов получает новый заказ, Повар готовит заказ из очереди, когда заказ готов, Повар кладет заказ в очередь готовых заказов, Официант берет готовый заказ и очереди готовых заказов и несет его Клиенту. Словно синхронизация пока не предусмотрена. Функционал максимально простой - выводы в консоль уже хорошо!

Рассмотреть вариант создания синхронизации и многопоточности от более высокого уровня к низкому.

Пример более высокого уровня (использование решений java из “коробки”)
попробовать использовать ExecutorService для pool из поваров и официантов
попробовать использовать BlockingQueue для очереди из заказов и очереди из готовых заказов (то есть их будет 2)

Официант может быть и консюмером, и продюсером - кладёт заказ, потом ждёт готовый.

Клиенты не будут потоками (ни к чему). Можно интерпретировать как “клиент = заказ”

Формулировка задачи содержит подсказку. Отслеживать, если Повар / Официант свободен можно через булеву переменную для простоты
